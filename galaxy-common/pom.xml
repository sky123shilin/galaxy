<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!--  遵从的父项目-->
	<parent>
		<groupId>org.galaxy</groupId>
		<artifactId>galaxy-parent</artifactId>
		<version>1.0-SNAPSHOT</version>
	</parent>

	<!--  本模块自己的maven坐标	-->
	<artifactId>galaxy-common</artifactId>
	<packaging>jar</packaging>

	<properties>
		<java.version>1.8</java.version>
		<protostuff.version>1.8.0</protostuff.version>
		<galaxy.version>1.0-SNAPSHOT</galaxy.version>
	</properties>

	<dependencies>
		<!--	版本指定来自于galaxy-parent => spring-boot-starter-parent	-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!--引入RedisTemplate依赖-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>

		<!--引入protostuff依赖-->
		<dependency>
			<groupId>io.protostuff</groupId>
			<artifactId>protostuff-core</artifactId>
			<version>${protostuff.version}</version>
		</dependency>

		<dependency>
			<groupId>io.protostuff</groupId>
			<artifactId>protostuff-runtime</artifactId>
			<version>${protostuff.version}</version>
		</dependency>

		<!--引入mybatis-plus框架-->
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus-boot-starter</artifactId>
		</dependency>

		<!--引入google guava依赖-->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
		</dependency>

		<!--引入fast-json依赖-->
		<dependency>
			<groupId>com.alibaba.fastjson2</groupId>
			<artifactId>fastjson2</artifactId>
		</dependency>

		<!-- 本项目子项目galaxy-common -->
		<dependency>
			<groupId>org.galaxy</groupId>
			<artifactId>galaxy-util</artifactId>
			<version>${galaxy.version}</version>
		</dependency>

		<!--引入Hessian2依赖，来实现Hessian序列化-->
		<dependency>
			<groupId>com.caucho</groupId>
			<artifactId>hessian</artifactId>
			<version>4.0.66</version>
		</dependency>

		<!--引入XStream依赖 来处理xml的序列化-->
		<dependency>
			<groupId>com.thoughtworks.xstream</groupId>
			<artifactId>xstream</artifactId>
			<version>1.4.15</version>
		</dependency>

		<!--引入thrift依赖 来实现thrift的序列化-->
		<dependency>
			<groupId>org.apache.thrift</groupId>
			<artifactId>libthrift</artifactId>
			<version>0.18.1</version>
		</dependency>

		<!--引入kryo依赖 来实现kryo的序列化-->
		<dependency>
			<groupId>com.esotericsoftware</groupId>
			<artifactId>kryo-shaded</artifactId>
			<version>4.0.2</version>
		</dependency>

		<!--引入jboss marshalling的序列化模块依赖 来实现marshalling的序列化-->
		<dependency>
			<groupId>org.jboss.marshalling</groupId>
			<artifactId>jboss-marshalling-serial</artifactId>
			<version>2.1.1.Final</version>
		</dependency>

		<!--引入avro依赖 来实现avro的序列化-->
		<dependency>
			<groupId>org.apache.avro</groupId>
			<artifactId>avro</artifactId>
			<version>1.11.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.avro</groupId>
			<artifactId>avro-ipc</artifactId>
			<version>1.11.1</version>
		</dependency>

	</dependencies>

</project>
